# SQL Accounting REST API Project

## Overview
This project provides RESTful APIs for interacting with SQL Accounting software. The APIs wrap the BizObject libraries and enable CRUD operations for various SQL Accounting database elements like customers, stock items, sales orders, and invoices. The underlying database is based on Firebird.

## Project Structure
The project is structured as follows:
```
SqlAccountRestAPI/
├── Controllers/          # API controllers
├── Lib/                  # Core libraries and business logic
├── Middleware/           # Custom middleware
├── Models/               # Data models
├── Properties/           # Project properties
├── appsettings.json      # Configuration file
├── Program.cs            # Entry point of the application
└── SqlAccountRestAPI.csproj  # Project configuration
```

## Refactoring Notes
To ensure high maintainability and scalability:
- **Dependency Injection (DI)**: All controllers utilize DI for better testability and loose coupling.
- **Separation of Concerns**: Data access logic is abstracted into repositories, while business logic resides in service layers.
- **Repository and Service Layers**: These layers facilitate better modularity and adherence to the Single Responsibility Principle.

## Installation
Follow these steps to install and run the project:
1. Clone the repository.
    ```bash
    git clone https://github.com/beehexacorp/sqlaccountapi.git
    ```
2. Navigate to the project directory.
    ```bash
    cd sqlaccountapi/SqlAccountRestAPI
    ```
3. Build the project using .NET CLI.
    ```bash
    dotnet build
    ```
4. Run the project.
    ```bash
    dotnet run
    ```

## Usage
- **Base URL**: `http://localhost:5280/api`
- Available endpoints:

| Endpoint                 | Description                              |
|--------------------------|------------------------------------------|
| `/api/customer`         | Manage customer data.                    |
| `/api/customer-invoice` | Manage customer invoices.                |
| `/api/customer-payment` | Handle customer payments.                |
| `/api/sale-invoice`     | Manage sale invoices.                    |
| `/api/sale-order`       | Handle sales orders.                     |
| `/api/stock-adjustment` | Perform stock adjustments.               |
| `/api/stock-item`       | Manage stock items.                      |
| `/api/stock-item-template` | Manage stock item templates.         |

### Sample Request
**Get customer by CODE:**
```http
GET /api/customer/code/300-A0009
```

## Unit Testing
Unit tests are written using xUnit. To run the tests:
1. Navigate to the `tests` directory (or relevant folder).
2. Run the tests using the following command:
    ```bash
    dotnet test
    ```

## Publishing
To publish the API as a package:
1. Set the `OutputPath` in your `.csproj` file.
2. Publish using the .NET CLI:
    ```bash
    dotnet publish -c Release -o ./publish
    ```
3. Deploy the package to your preferred environment (e.g., Azure, Docker).

## Contributing
We welcome contributions! Follow these steps:
1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Commit your changes and push them to your branch.
4. Submit a pull request for review.

## License
This project is licensed under the MIT License. See `LICENSE` for more details.

---
This README serves as a comprehensive guide for setting up, using, and contributing to the SQL Accounting REST API project.
